#include "fraction.h"
#include <iostream>
#include <cstdlib>
#include <sstream>
#include <math.h>

using namespace std;

Fraction::Fraction() {
    numerator = 0;
    denominator = 1;
    V = false;
}

Fraction::Fraction(int w, int n, int d) {
  whole = w;
  numerator = n;
  denominator = d;
  bool negative = false;

  if (w < 0) {
    negative = true;
    w = -w;
  }
  else if (n < 0) {
    negative = true;
    n = -n;
  }
  //check if valid here  --TODO
  //reduce now
  reduce();
  n += w * d;
  w = 0;
  if (negative) n = -n;
  whole = w;
  numerator = n;
  denominator = d;
  // isValid();
}

//Implementation of float to fraction
Fraction::Fraction(float f) {
  whole = int(f);
  float tempNumber = f - whole;
  stringstream ss;
  ss << tempNumber;
  string s = ss.str();
  int size = s.length() -2;

  long long int power = pow(10, size);
  long long int tempNumerator = tempNumber * power;
  numerator = tempNumerator;
  denominator = pow(10,size);
  //get rid of this cout before submitting
  cout << whole << " " << numerator << "/" << denominator << endl;  //for debug only
}
/*
//Check if the fractions are valid
bool Fraction::isValid() {
  if (denominator == 0) {
    V = false;
    cout << "Divide by Zero" << endl;
    return false;
  }
  else if (denominator < 0) {
    V = false;
    cout << "Denominator cannot be less than zero" << endl;
    return false;
  }
  V = true;
  return true;

}

*/

//Implementation of Input operator
istream & operator >> (istream &input, Fraction &f) {
	
	int wholeNumber, numerator, denominator;
	char divisorSign;
	input >> wholeNumber >> numerator >> divisorSign >> denominator;
  	bool isNegative = false;
	
	if (wholeNumber < 0) {
		isNegative = true;
		wholeNumber = -wholeNumber;
	}
	else if (numerator < 0){
		isNegative = true;
		numerator = -numerator;
	}
	
	if(!input.fail()) {
		f.numerator = numerator;
		f.denominator = denominator;
		
		f.reduce();
		
		f.numerator += wholeNumber * f.denominator;
		
		if (isNegative) f.numerator = -f.numerator;
	}
	return input;
}

//Implementation of output operator
ostream & operator << (ostream &output, const Fraction &f) {
	int wholePrint = f.numerator / f.denominator;
	int numeratorPrint = f.numerator % f.denominator;
	
	if (wholePrint < 0 && numeratorPrint < 0) {
		numeratorPrint = -numeratorPrint;
	}									
	
	output << wholePrint << " " << numeratorPrint << "/" << f.denominator;
	return output;																											
}

//less than operator to order fractions based on their value
bool Fraction:: operator < (const Fraction &other) const {
	return numerator * other.denominator < other.numerator * denominator;
}

//greater than operator to order fractions based on their value
bool Fraction:: operator > (const Fraction &other) const {
	return numerator * other.denominator > other.numerator * denominator;
}

//Implementation of == operator to check equality
bool Fraction:: operator == (const Fraction &other) const {
  return numerator * other.denominator == other.numerator * denominator;
}

//Implementation <= operator to check less than or equal to
bool Fraction:: operator <= (const Fraction &other) const {
  return numerator * other.denominator <= other.numerator * denominator;
}

//Implementation of + 
Fraction Fraction:: operator + (const Fraction &rhs) const {
  Fraction Sum = Fraction();
  Sum.numerator = (numerator * rhs.denominator) + (rhs.numerator * denominator);
  Sum.denominator = denominator * rhs.denominator;
  Sum.reduce();
  return Sum;
}

//Implementation of -
Fraction Fraction:: operator - (const Fraction &rhs) const {
  Fraction Difference = Fraction();
Difference.numerator = (numerator * rhs.denominator) - (rhs.numerator * denominator);
  Difference.denominator = denominator * rhs.denominator;
  Difference.reduce();
  return Difference;
}

//Implementation of multiplication *
Fraction Fraction:: operator * (const Fraction &rhs) const {
  Fraction Product = Fraction();
  Product.numerator = (numerator * rhs.numerator);
  Product.denominator = denominator * rhs.denominator;
  Product.reduce();
  return Product;
}

//Implementation of divide
Fraction Fraction:: operator / (const Fraction &rhs) const {
  Fraction Divide = Fraction();
  int sign = 1;
  if(rhs.numerator < 0)
    sign = -1;
  //Fraction rhs_flipped = Fraction(0,rhs.denominator, rhs.numerator);
  int tempnumo, tempdeno;
  tempnumo = rhs.denominator;
  tempdeno = rhs.numerator;
  Divide.numerator = (numerator * tempnumo) * sign;
  Divide.denominator = denominator * tempdeno;
  Divide.reduce();
  Divide.denominator = abs(Divide.denominator);
  return Divide;
}
//Implement div equal
Fraction Fraction::operator /= (const Fraction &rhs) {
  Fraction tempDiv = Fraction(1,0,1);
  tempDiv = *this / rhs;
  tempDiv.reduceDivisions();
  *this = tempDiv;
  return *this;
}

//Implementation of  plus equal operator
Fraction Fraction::operator += (const Fraction &rhs) {
    numerator = (numerator * rhs.denominator) + (rhs.numerator * denominator);
    denominator *= rhs.denominator;
    reduce();
    return *this;
} 

//Implementation of  minus equal operator
Fraction Fraction::operator -= (const Fraction &rhs) {
  // numerator = ((numerator * rhs.denominator) - (rhs.numerator * denominator));
  // denominator *= rhs.denominator;
 
    *this = *this - rhs; 
    // reduce();
    return *this;
}
//Implementation of multiply equal operator
Fraction Fraction::operator *= (const Fraction &rhs) {
  numerator = (numerator * rhs.numerator);
  denominator *= rhs.denominator;
  reduce();
  return *this;
}


// function to reduce the fraction by using gcd
void Fraction::reduce() {
   int divisor = gcd(denominator, abs(numerator)); 
  // int divisor = gcd(denominator, numerator);
  numerator /= divisor;
  denominator /= divisor;
}

//use this to reduce Division fractions 
void Fraction::reduceDivisions() {
  // int divisor = gcd(abs(denominator), numerator); //this works
  int divisor = gcd(denominator, numerator);
  numerator /= divisor;
  denominator /= divisor;
  denominator = abs(denominator);
}


// uses Euclid's algorithm from wiki to find the greatest common divisor
int Fraction::gcd(long long a, long long b) const {

    while (b != 0) {
        long long oldA = a;
        a = b;
        b = oldA % b;
    }

    return a;
}
