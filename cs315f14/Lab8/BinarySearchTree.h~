#ifndef BINARY_SEARCH_TREE_H
#define BINARY_SEARCH_TREE_H

#include "dsexceptions.h"
#include <algorithm>
#include <iostream>

using namespace std;       

// BinarySearchTree class
//
// CONSTRUCTION: zero parameter
//
// ******************PUBLIC OPERATIONS*********************
// void insert( x )       --> Insert x
// void remove( x )       --> Remove x
// bool contains( x )     --> Return true if x is present
// Comparable findMin( )  --> Return smallest item
// Comparable findMax( )  --> Return largest item
// boolean isEmpty( )     --> Return true if empty; else false
// void makeEmpty( )      --> Remove all items
// void printTree( )      --> Print tree in sorted order
// ******************ERRORS********************************
// Throws UnderflowException as warranted

template <typename Comparable>
class BinarySearchTree
{
 public:
 BinarySearchTree( ) : root{ nullptr }
  {
  }

  /**
   * Copy constructor
   */
 BinarySearchTree( const BinarySearchTree & rhs ) : root{ nullptr }
  {
    root = clone( rhs.root );
  }

  /**
   * Move constructor
   */
 BinarySearchTree( BinarySearchTree && rhs ) : root{ rhs.root }
  {
    rhs.root = nullptr;
  }
    
  /**
   * Destructor for the tree
   */
  ~BinarySearchTree( )
    {
      makeEmpty( );
    }

  /**
   * Copy assignment
   */
  BinarySearchTree & operator=( const BinarySearchTree & rhs )
    {
      BinarySearchTree copy = rhs;
      std::swap( *this, copy );
      return *this;
    }
        
  /**
   * Move assignment
   */
  BinarySearchTree & operator=( BinarySearchTree && rhs )
    {
      std::swap( root, rhs.root );       
      return *this;
    }
    
    
  /**
   * Find the smallest item in the tree.
   * Throw UnderflowException if empty.
   */
  const Comparable & findMin( ) const
  {
    if( isEmpty( ) )
      throw UnderflowException{ };
    return findMin( root )->element;
  }

  /**
   * Find the largest item in the tree.
   * Throw UnderflowException if empty.
   */
  const Comparable & findMax( ) const
  {
    if( isEmpty( ) )
      throw UnderflowException{ };
    return findMax( root )->element;
  }

  /**
   * Returns true if x is found in the tree.
   */
  bool contains( const Comparable & x ) const
  {
    return contains( x, root );
  }

  /**
   * Test if the tree is logically empty.
   * Return true if empty, false otherwise.
   */
  bool isEmpty( ) const
  {
    return root == nullptr;
  }

  /**
   * Print the tree contents in sorted order.
   */
  void printTree( ostream & out = cout ) const
  {
    if( isEmpty( ) )
      out << "Empty tree" << endl;
    else

      printTree( root, out );
  }

  /**
   * Make the tree logically empty.
   */
  void makeEmpty( )
  {
    makeEmpty( root );
  }

  /**
   * Insert x into the tree; duplicates are ignored.
   */
  bool insert( const Comparable & x)
  {
    return insert( x, root);
  }
    
    
    /**
     * Remove x from the tree. Nothing is done if x is not found.
     */
  void remove( const Comparable & x )
  {
    remove( x, root );
  }

  int RankOfKey(Comparable & x)
  {
    return RankOfKey(x, root);
  }

  Comparable KeyOfRank(int rank)
  {
    return(KeyOfRank(rank, root));
  }

  int size()
  {
    return size(root);
  }

 private:
    struct BinaryNode
    {
      Comparable element;
      BinaryNode *left;
      BinaryNode *right;
      int size;
      vector<int> lineNumberList;

      BinaryNode( const Comparable & theElement, BinaryNode *lt, BinaryNode *rt )
      : element{ theElement }, left{ lt }, right{ rt } , size { 1 } { }
        
      BinaryNode( Comparable && theElement, BinaryNode *lt, BinaryNode *rt )
      : element{ std::move( theElement ) }, left{ lt }, right{ rt } { }
    };

    BinaryNode *root;


    /**
     * Internal method to insert into a subtree.
     * x is the item to insert.
     * t is the node that roots the subtree.
     * Set the new root of the subtree.
     */
    bool insert( const Comparable & x, BinaryNode * & t)
    {
      if( t == nullptr){
	t = new BinaryNode{ x, nullptr, nullptr };
	return true;
      }
      else if( x < t->element )
	{
	  if (insert( x, t->left))
	    {
	      t->size++;
	      return true;
	    }
	}
      else if( t->element < x )
	{
	  if (insert( x, t->right))
	    {
	      t->size++;
	      return true;
	    }
	}
      else if (t->element ==x){
	  return false;
      }
    }

    //Returns Rank of Key
    int RankOfKey(const Comparable & x, BinaryNode * t)
    {
      if (t == NULL)
	return 0;
      if (x < t->element)
	{
	  return RankOfKey(x, t->left);
	}
      else if (x == t->element)
	{
	  if(t->left != NULL)
	    return 1+ t->left->size;
	  else 
	    return 1;
	}
      else if (x > t->element)
	if (t->left == NULL)
	  return 1 + RankOfKey(x, t->right);
	else
	    return 1 + t->left->size + RankOfKey(x, t->right);
    }

    //Returns Key of Rank
    Comparable KeyOfRank(int k, BinaryNode * t)
    {
      if ((t == NULL) || (k > t->size))
	return 0;
      //work on this -----core dumpx
      else if (k ==0)
	{
	  cout <<"JPT"<< endl;
	  return 0;
	}
      else if (k == t->size)
	return findMax(t)->element;
      else if (t->left->size == k-1)
	{
	  if (t->left != NULL)
	    return t->element;
	}
      else if (t->left->size >= k)
	return KeyOfRank(k, t->left);
      else
	return KeyOfRank(k - t->left->size - 1, t->right);
    } 

    //returns the size of tree
    int size(BinaryNode * t)
    {
      return t->size;
    }

    /**
     * Internal method to remove from a subtree.
     * x is the item to remove.
     * t is the node that roots the subtree.
     * Set the new root of the subtree.
     */
    bool remove( const Comparable & x, BinaryNode * & t )
    {
      if( t == nullptr )
	return false;   // Item not found; do nothing
      if( x < t->element )
	{
	  bool result = remove(x, t->left);
	  if (result)
	    {
	      t->size--;
	    }
	  return result;
	}
      else if( t->element < x )
	{
	  bool result = remove(x, t->right);
	  if (result)
	    {
	      t->size--;
	    }
	  return result;
	}
      else
	{
	  if(t->left == nullptr && t->right == nullptr)
	    {
	      t = NULL;
	      return true;
	    }
	  else if ((t->left != nullptr && t->right == nullptr) || 
		   (t->left == nullptr && t->right != nullptr))
	    {
	      if(t->left != nullptr)
		{
		  t = t->left;
		}
	      else
		{
		  t = t->right;
		}
	    }
	  else
	    {
	      BinaryNode* min = findMin(t->right);
	      remove(min->element, t->right);
		t->element = min->element;
	    }
	  t->size--;
	  return true;
	}
    }

    /**
     * Internal method to find the smallest item in a subtree t.
     * Return node containing the smallest item.
     */
    BinaryNode * findMin( BinaryNode *t ) const
    {
      if( t == nullptr )
	return nullptr;
      if( t->left == nullptr )
	return t;
      return findMin( t->left );
    }

    /**
     * Internal method to find the largest item in a subtree t.
     * Return node containing the largest item.
     */
    BinaryNode * findMax( BinaryNode *t ) const
    {
      if( t != nullptr )
	while( t->right != nullptr )
	  t = t->right;
      return t;
    }


    /**
     * Internal method to test if an item is in a subtree.
     * x is item to search for.
     * t is the node that roots the subtree.
     */
    bool contains( const Comparable & x, BinaryNode *t ) const
    {
      if( t == nullptr )
	return false;
      else if( x < t->element )
	return contains( x, t->left );
      else if( t->element < x )
	return contains( x, t->right );
      else
	return true;    // Match
    }

     /**
     * Internal method to make subtree empty.
     */
    void makeEmpty( BinaryNode * & t )
    {
      if( t != nullptr )
        {
	  makeEmpty( t->left );
	  makeEmpty( t->right );
	  delete t;
        }
      t = nullptr;
    }

    //Internal method to print a subtree rooted at t in sorted order.
    void printTree( BinaryNode *t, ostream & out ) const
    {
      if( t != nullptr )
        {
	  printTree( t->left, out );
	  out << t->element << endl;
	  printTree( t->right, out );
        }
    }
    //Internal method to clone subtree.
    BinaryNode * clone( BinaryNode *t ) const
    {
      if( t == nullptr )
	return nullptr;
      else
	return new BinaryNode{ t->element, clone( t->left ), clone( t->right ) };
    }
};

#endif
